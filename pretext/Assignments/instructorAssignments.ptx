<?xml version="1.0"?>
<section xml:id="instructor-interface_assignments">
  <title>Understanding Assignments</title>

  <p>Runestone supports two different kinds of assignments. <term>Reading Assignments</term> and <term>Problem Sets</term>. Understanding the difference between these two kinds of assignments is very important so lets discuss each before moving on to creating assignments.</p>


  <paragraphs>
    <title>Reading Assignments</title>
    <p>
      In Runestone, a reading assignment is by design a formative exercise, low stakes activities to encourage your students to prepare and help them learn. They are not meant to evaluate their progress. As such points are based on the students interaction with the textbook regardless of correctness. Points are assigned based on the number of interactive activities on each page. One activity is simply opening the page. Other activities are based on answering questions or running programs or trying out visualizations that are in on each page. The grading is set up to be all or nothing for each page. If a student interacts with roughly 80% of the activities on the page they will get full credit. If they do not then they get zero points. You can change that threshold to be whatever you want when you are setting up the assignment. It is worth repeating that they get credit for <em>interacting</em> with each thing not for getting it right.</p>
    <p>When you create a reading assignment it will appear on the Assignments page, and each page of the reading assignment will have a link to the next page in the assignment. This allows you to encourage your students to read the pages in the order you choose rather than the order they appear in the book.</p>
  </paragraphs>
  <paragraphs>
    <title>Problem Sets</title>
    <p>
      In Runestone a problem set is a group of exercises that are graded for correctness. These can be programming problems, fill in the blank questions, multiple choice or any other gradeable activity. The problems may come from anywhere.
    <ul>
      <li>The body of the text</li>
      <li>From exercises at the end of the chapter</li>
      <li>Problems that you create yourself</li>
      <li>Problems from a question bank or from another book</li>
    </ul>
    When you create a problem set the problems appear on the assignment page and the student can either work on them there or in the context of the book. To the Runestone system it does not matter where they work on the problem, just that they do work on the problem.</p>

    <remark>
      <title>Overloading Assignments</title>
      <p>Besides regular problem sets, a problem set can also be used to create two other student experiences.
      <ol>
        <li>Timed Assessments -- See
          <xref ref="instructor-interface_exams-and-quizzes-in-runestone" />.
        </li>
        <li>Peer Instruction Work -- See
          <xref ref="peer_instruction" />
        </li>
      </ol>
      </p>
    </remark>

  </paragraphs>

  <paragraphs>
    <title>Assignments and Student Work</title>
    <p>Because the Runestone Server and the textbooks are so tightly coupled, the primary job of the server is to capture the work your students do. As your students interact with the book, the book and the server work together to capture the clicks, the answers to questions, the code your students write, etc. All of this is captured <em>regardless of whether the activities are part of an assignment.</em> When you make an assignment that is a layer on top of all of the data collection that simply tells the software what actions to group together when you want to assign a grade.</p>
    <p>
      The separation of data collection from assignments can be a bit confusing at first. It has important implications that you should understand.
    <ul>
      <li>If you use the same question in multiple assignments the student only has to do the work once.</li>
      <li>If you delete an assignment, your students do not lose any work.</li>
      <li>There is no need for your students to <q>submit</q> an assignment. When it comes time to grade the software simply uses the data collected for each of the questions in the assignment.</li>
    </ul>
    </p>

  </paragraphs>

  <paragraphs>
    <title>Assignments and LTI</title>
    <p>If you have LTI configured (<xref ref="lti_integration" />)  Then your students will see a message on the assignment page that says that Assignments can only be accessed through the LMS.  This is so grades can be properly passed back to the LMS. </p>
    <p>If you decide you don't want to use LTI you can remove that message and display the student assignments as usual by deleting the LTI keys you created when you set up LTI.</p>
  </paragraphs>

  <paragraphs>
    <title>Assignment Status</title>
    <p>
      The choose assignment page shows the status of the assignment. Students are encouraged to use this to keep themselves organized. They can mark an assignment as <term>in progress</term> or <term>submitted</term> But marking an assignment as submitted is <em>advisory</em> only. They can continue to work on the assignment and Runestone will continue to record what they do. When you grade the assignment you have the flexibility to decide what to grade and how to grade it. You can enforce your deadlines, or relax your deadlines. You can grade your students best response, their last response or their first.</p>
    <p>The image below shows the choose assignment page. The student can see that two assignments have been graded and one assignment is "in progress." This makes it easier for students to know where they are it with each homework assignment, but to repeat has no actual bearing on grading.
    </p>

    <image source="Figures/chooseAssignmentStatus.png" alt="Choose assignment with status" />

    <p>While Runestone is not (yet) smart enough to automatically mark a students assignment in progress, the student can set toggle through the status values by clicking the button at the bottom of the assignment page.</p>
    <image source="Figures/changeStatus.png" alt="change status" />
    <p>The values for the status will toggle through the following options:
    <ul>
      <li>Not Started</li>
      <li>In Progress</li>
      <li>Complete</li>
    </ul>
    </p>
  </paragraphs>
</section>