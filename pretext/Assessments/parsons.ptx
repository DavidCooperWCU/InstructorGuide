<?xml version="1.0"?>
<section xml:id="assessments_parsons-problems-mixed-up-blocks">
  <title>Parsons Problems - Mixed Up Blocks</title>
  <p>Parsons problems provide blocks that are mixed up and the user must drag the blocks to the right and put them in the correct order. The blocks can be plain text as shown below.</p>
  <exercise label="morning" indent="show" language="python">
    <statement>
      <p>Put the blocks in order to describe a morning routine.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>get up</cline>
      </block>
      <block order="3">
        <cline>eat breakfast</cline>
      </block>
      <block order="1">
        <cline>brush your teeth</cline>
      </block>
    </blocks>
  </exercise>
  <hint>
    <program language="rst">
      <input>
      .. parsonsprob:: morning

      Put the blocks in order to describe a morning routine.
      -----
      get up
      =====
      eat breakfast
      =====
      brush your teeth
      </input>
    </program>
  </hint>
  <p>The blocks can contain code. They can
    also have numbered labels on the left or right side which can help people working in groups to discuss the problem (:numbered: left or :numbered: right). The example below shows a problem in Python. Notice that a block can contain more than one line of code. Be sure to break up the lines of code so that there is only one correct solution.</p>
  <exercise label="per_person_cost" numbered="yes" indent="show" language="python">
    <statement>
      <p>The following program should figure out the cost per person for a dinner including the tip. But the blocks have been mixed up. Drag the blocks from the left and put them in the correct order on the right. Click the <em>Check Me</em> button to check your solution.&lt;/p&gt;</p>
    </statement>
    <blocks>
      <block order="1">
        <cline>bill = 89.23</cline>
      </block>
      <block order="3">
        <cline>tip = bill * 0.20</cline>
      </block>
      <block order="4">
        <cline>total = bill + tip</cline>
      </block>
      <block order="2">
        <cline>numPeople = 3</cline>
        <cline>perPersonCost = total / numPeople</cline>
      </block>
      <block order="5">
        <cline>print(perPersonCost)</cline>
      </block>
    </blocks>
  </exercise>
  <hint>
    <program language="rst">
      <input>
      .. parsonsprob:: per_person_cost
      :numbered: left

      The following program should figure out the cost per person for a dinner including the tip. But the blocks have been mixed up. Drag the blocks from the left and put them in the correct order on the right. Click the *Check Me* button to check your solution.&lt;/p&gt;
      -----
      bill = 89.23
      =====
      tip = bill * 0.20
      =====
      total = bill + tip
      =====
      numPeople = 3
      perPersonCost = total / numPeople
      =====
      print(perPersonCost)
      </input>
    </program>
  </hint>
  <p>Here is an example in Java. Parsons problems can have distractor (incorrect) code blocks that are not needed in a correct solution. Indicate that a block is a distractor by adding (#distractor) at the end of the line of code. This will randomly mix in the distractor block with the correct code blocks. The problems can also be adaptive (:adaptive:), which means that if learner is struggling to answer the problem correctly it can dynamically be made easier by removing distractors or combining blocks. You can tell if a problem is adaptive because it will have a <q>Help Me</q> button. The learner must submit at least three incorrect solutions before they can use the help button. Also, notice that the indentation has been provided in the problem below. This is because of the ( :noindent:).</p>
  <exercise label="java_countdown" numbered="yes" adaptive="yes" indent="hide" language="python">
    <statement>
      <p>The following program segment should print a countdown from 15 to 0 (15, 14, 13, &#x2026; 0). But the blocks have been mixed up and include &lt;b&gt;one extra block&lt;/b&gt; that is not needed in a correct solution. Drag the needed blocks from the left and put them in the correct order on the right. Click the <em>Check Me</em> button to check your solution.&lt;/p&gt;</p>
    </statement>
    <blocks>
      <block order="4">
        <cline>public class Test1</cline>
        <cline>{</cline>
      </block>
      <block order="3">
        <cline> public static void main(String[] args)</cline>
        <cline> {</cline>
      </block>
      <block order="7">
        <cline> for (int i = 15; i &gt;=0; i--)</cline>
      </block>
      <block order="6" correct="no">
        <cline> for (int i = 15; i &gt; 0; i--) </cline>
      </block>
      <block order="5">
        <cline> System.out.println(i);</cline>
      </block>
      <block order="1">
        <cline> }</cline>
      </block>
      <block order="2">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <hint>
    <program language="rst">
      <input>
      .. parsonsprob:: java_countdown
      :numbered: left
      :adaptive:
      :noindent:

      The following program segment should print a countdown from 15 to 0 (15, 14, 13, ... 0). But the blocks have been mixed up and include &lt;b&gt;one extra block&lt;/b&gt; that is not needed in a correct solution. Drag the needed blocks from the left and put them in the correct order on the right. Click the *Check Me* button to check your solution.&lt;/p&gt;
      -----
      public class Test1
      {
      =====
      public static void main(String[] args)
      {
      =====
      for (int i = 15; i &gt;=0; i--)
      =====
      for (int i = 15; i &gt; 0; i--) #distractor
      =====
      System.out.println(i);
      =====
      }
      =====
      }
      </input>
    </program>
  </hint>
  <p>Here is the same example, but with a paired distractor (#paired vs #distractor). The distractor block be shown either above or below the correct block. There will also be purple edges on the sides and the word <q>or</q> to show that the blocks are paired.</p>
  <exercise label="java_countdown_paired" numbered="yes" indent="hide" language="python">
    <statement>
      <p>The following program segment should print a countdown from 15 to 0 (15, 14, 13, &#x2026; 0). But the blocks have been mixed up and include &lt;b&gt;one extra block&lt;/b&gt; that is not needed in a correct solution. Drag the needed blocks from the left and put them in the correct order on the right. Click the <em>Check Me</em> button to check your solution.&lt;/p&gt;</p>
    </statement>
    <blocks>
      <block order="5">
        <cline>public class Test1</cline>
        <cline>{</cline>
      </block>
      <block order="2">
        <cline> public static void main(String[] args)</cline>
        <cline> {</cline>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline> for (int i = 15; i &gt;=0; i--)</cline>
        </choice>
        <choice>
          <cline> for (int i = 15; i &gt; 0; i--) </cline>
        </choice>
      </block>
      <block order="6">
        <cline> System.out.println(i);</cline>
      </block>
      <block order="1">
        <cline> }</cline>
      </block>
      <block order="4">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <hint>
    <program language="rst">
      <input>
      .. parsonsprob:: java_countdown_paired
      :numbered: left
      :noindent:

      The following program segment should print a countdown from 15 to 0 (15, 14, 13, ... 0). But the blocks have been mixed up and include &lt;b&gt;one extra block&lt;/b&gt; that is not needed in a correct solution. Drag the needed blocks from the left and put them in the correct order on the right. Click the *Check Me* button to check your solution.&lt;/p&gt;
      -----
      public class Test1
      {
      =====
      public static void main(String[] args)
      {
      =====
      for (int i = 15; i &gt;=0; i--)
      =====
      for (int i = 15; i &gt; 0; i--) #paired
      =====
      System.out.println(i);
      =====
      }
      =====
      }
      </input>
    </program>
  </hint>
  <p>Here is the same problem, but now the user has to indent the code as well since this does not have (:noindent:). That means the user must provide the indentation. Notice the lines in the solution area to the right, they that indicate that indentation is possible.</p>
  <exercise label="java_countdown_paired2" numbered="yes" indent="show" language="python">
    <statement>
      <p>The following program segment should print a countdown from 15 to 0 (15, 14, 13, &#x2026; 0). But the blocks have been mixed up and include &lt;b&gt;one extra block&lt;/b&gt; that is not needed in a correct solution. Drag the needed blocks from the left and put them in the correct order on the right. Click the <em>Check Me</em> button to check your solution.&lt;/p&gt;</p>
    </statement>
    <blocks>
      <block order="5">
        <cline>public class Test1</cline>
        <cline>{</cline>
      </block>
      <block order="6">
        <cline> public static void main(String[] args)</cline>
        <cline> {</cline>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline> for (int i = 15; i &gt;=0; i--)</cline>
        </choice>
        <choice>
          <cline> for (int i = 15; i &gt; 0; i--) </cline>
        </choice>
      </block>
      <block order="2">
        <cline> System.out.println(i);</cline>
      </block>
      <block order="4">
        <cline> }</cline>
      </block>
      <block order="1">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <hint>
    <program language="rst">
      <input>
      .. parsonsprob:: java_countdown_paired
      :numbered: left

      The following program segment should print a countdown from 15 to 0 (15, 14, 13, ... 0). But the blocks have been mixed up and include &lt;b&gt;one extra block&lt;/b&gt; that is not needed in a correct solution. Drag the needed blocks from the left and put them in the correct order on the right. Click the *Check Me* button to check your solution.&lt;/p&gt;
      -----
      public class Test1
      {
      =====
      public static void main(String[] args)
      {
      =====
      for (int i = 15; i &gt;=0; i--)
      =====
      for (int i = 15; i &gt; 0; i--) #paired
      =====
      System.out.println(i);
      =====
      }
      =====
      }
      </input>
    </program>
  </hint>
</section>