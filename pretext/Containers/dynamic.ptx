<?xml version="1.0"?>
<section xml:id="containers_dynamic-questions">
  <title>Dynamic Questions</title>
  <introduction>
  <p>To support a model of writing and assessing using a question bank we have
            added new directives that allow you to select a question when the page is loaded.
            The simplest is to simply specify the id of a question you want inserted at
            any point in a book or an exam.</p>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=dynamic_q_1 data-questionlist='question1_2'           data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: question1_2&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <hint>
    <pre>.. selectquestion:: dynamic_q_1
   :fromid: question1_2</pre>
  </hint>
  <p>If you list multiple questions as part of the <c>:fromid:</c> option a question will be selected at random when it is displayed to the student.</p>
  </introduction>
  <subsection xml:id="containers_using-dynamic-questions-to-secure-exams">
    <title>Using Dynamic Questions to secure Exams</title>
    <p>Using the <c>selectquestion</c> directive has real benefits for writing a timed exam including:</p>
    <p>
      <ul>
        <li>
          <p>Questions are not loaded into the page until the student sees the question for the first time.  This prevents students from viewing the source to see the questions.</p>
        </li>
        <li>
          <p>Using <c>:fromid: question_1, question_2, ...</c> you can provide multiple equivalent questions for each exam question making it more difficult for students to share answers.</p>
        </li>
      </ul>
    </p>
    <p>There are several other options to the <c>selectquestion</c> that are designed to support automated exam creation, but they rely on the presence of a well developed and structured question bank.  Something we would love to develop in Runestone, but have not yet completed.</p>
    <p>
      <ul>
        <li>
          <p><c>:proficiency:</c> - If you have a lot of questions and they are tagged with either <c>:prim_comp:</c> or <c>:supp_comp:</c>  then the exam will choose a question at random from all questions in the question bank that are aimed at that particular proficiency.</p>
        </li>
        <li>
          <p><c>:min_difficulty:</c> - We have developed a way to automatically assign a level of difficulty to a question based on past students historical performance on the question.  This allows you to include a question between a minimum and maximum difficulty level.</p>
        </li>
        <li>
          <p>
            <c>:max_difficulty:</c>
          </p>
        </li>
        <li>
          <p><c>:autogradable:</c> &#x2013; this ensures that Runestone only chooses a question that is automatically gradeable.</p>
        </li>
        <li>
          <p><c>:not_seen_ever:</c> &#x2013; this ensures that Runestone selects a question that the student has not answered sometime in the past.</p>
        </li>
      </ul>
    </p>
    <p>There is lots of research to do to see if this approach can actually work and produce exams that students will accept as fair.  But it seems that for an online exam, generating a different (but equivalent) exam for every student could go a long way toward reducing cheating as well as saving instructors a lot of work.</p>
    <TimedNode line="43" runestone_options="{'timelimit': 10, 'subchapter': 'dynamic', 'chapter': 'Containers', 'basecourse': 'instructorguide', 'optional': '', 'optclass': '', 'divid': 'timed2', 'qnumber': '', 'question_label': '9.3.1.1'}" source="/Users/bmiller/Runestone/RunestoneServer/books/InstructorGuide/_sources/Containers/dynamic.rst">
      <exercise label="units7">
        <statement>
          <p>This is some question text.</p>
          <p>And this is more question text</p>
        </statement>
        <program xml:id="units7_editor" interactive="activecode" language="python">
          <input>
def add(a,b):
    return 4

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(add(2,2),4,"A feedback string when the test fails")
        self.assertAlmostEqual(add(2.0,3.0), 5.0, 1, "Try adding your parmeters")

myTests().main()
        </input>
        </program>
      </exercise>
      <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=dynamic_q_0 data-questionlist='question1_ma' data-points=5          data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: question1_ma&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
      <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=dynamic_q_2 data-questionlist='qce_1, question1_1, mchoice_random' data-points=5          data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: qce_1, question1_1, mchoice_random&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
      <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=dynamic_q_3 data-questionlist='units2' data-points=2          data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: units2&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
      <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=dynamic_q_4 data-questionlist='morning, per_person_cost' data-points=2          data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: morning, per_person_cost&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
    </TimedNode>
    <p>In the above timed exam the selectquestion was used to provide multiple options for each of the questions.  This would mean that students would not all get exactly the same questions on their exam but rather randomly selected, yet equivalent problems for each question in the exam.  Here is an example of how you can do that:</p>
    <hint>
      <pre>.. selectquestion:: dynamic_q_4
    :fromid: morning, per_person_cost
    :points: 2</pre>
    </hint>
  </subsection>
  <subsection xml:id="containers_ab-experiments-with-dynamic-questions">
    <title>AB Experiments with Dynamic Questions</title>
    <p>Using the <c>:AB:</c> option on selectquestion allows the system to assign a student to either the A or B group. If the student is in the A group they will always get the first question in the <title_reference>:fromid:</title_reference> list and if they are in the B group they will always get the second.</p>
    <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=ab_example data-questionlist='question1_1, mchoice_random' data-points=10       data-ab=experiment1   data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: question1_1, mchoice_random&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
    <hint>
      <pre>.. selectquestion:: ab_example
   :ab: experimentName
   :fromid: question1_1, mchoice_random
   :points: 10</pre>
    </hint>
  </subsection>
</section>
