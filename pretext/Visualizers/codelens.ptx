<?xml version="1.0"?>
<section xml:id="visualizers_the-codelens-tool">
  <title>The CodeLens Tool</title>
  <p>In addition to activecode, you can also execute Python code with the assistance of a unique visualization tool.  This tool, known as <term>codelens</term>, allows you to control the step by step execution of a program.  It also lets you see the values of
            all variables as they are created and modified.  The following example shows codelens in action on the same simple program as we saw above.  Remember that in activecode, the source code executes from beginning to end and you can see the final result.  In codelens you can see and control the step by step progress.  Try clicking on the forward button below.</p>
  <p>Note that you can control the step by step execution and you can even move forward and backward thru the statements as they execute.</p>
  <hint>
    <program language="rst">
      <input>
.. codelens:: firstexample
    :showoutput:

    print("My first program adds two numbers, 2 and 3:")
    print(2 + 3)
</input>
    </program>
  </hint>
  <p>The following example shows a more sophisticated program using Python lists.  The codelens tool draws very useful  pictures as the statements are being executed.  These pictures, called reference diagrams, are very helpful as you learn about the more complex aspects of Python.</p>
  <hint>
    <program language="rst">
      <input>
.. codelens:: secondexample

   fruit = ["apple","orange","banana","cherry"]
   numlist = [6,7]
   newlist = fruit + numlist
   zeros = [0] * 4

   zeros[1] = fruit
   zeros[1][2] = numlist
</input>
    </program>
  </hint>
</section>
